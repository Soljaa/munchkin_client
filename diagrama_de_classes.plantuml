@startuml classes
set namespaceSeparator none
class "ApplyDiscardCardBadStuffCurseEffect" as game.cards.curse_effect.ApplyDiscardCardBadStuffCurseEffect {
  apply(player) -> None
}
class "BlockCurses" as game.cards.item_effect.BlockCurses {
  {abstract}apply(player) -> None
}
class "BonusByRace" as game.cards.item_effect.BonusByRace {
  increase_by : int
  race_required
  {abstract}apply(player) -> None
}
class "BonusToEitherSideBuff" as game.cards.treasure_buff_effect.BonusToEitherSideBuff {
  bonus
  {abstract}apply(target) -> None
}
class "BuffsRestriction" as game.cards.buff_restriction.BuffsRestriction {
  {abstract}check(player) -> bool
}
class "Card" as game.card.Card {
  image
  name
  type
}
class "ChangeClassCurseEffect" as game.cards.curse_effect.ChangeClassCurseEffect {
  apply(player) -> None
}
class "ChangeRaceCurseEffect" as game.cards.curse_effect.ChangeRaceCurseEffect {
  apply(player) -> None
}
class "CharityPhase" as game.game_phases.charity_phase.CharityPhase {
  ai_turn : bool
  current_player_index
  players
  renderer
  distribute_cards(players, cards)
  get_lowest_cards_players()
  run(died)
}
class "Class" as game.card.Class {
  class_type
}
class "Combat" as game.combat.Combat {
  can_run_away : bool
  helpers : list
  monster
  monster_modifiers : int
  player
  player_modifiers : int
  add_helper(player)
  add_monster_modifier(value)
  add_player_modifier(value)
  apply_monster_effect()
  get_combat_state()
  get_monster_strength()
  get_player_strength()
  remove_helper(player)
  resolve_combat()
  try_to_run(value)
}
class "CombatPhase" as game.game_phases.combat_phase.CombatPhase {
  card
  player
  renderer
  run()
}
class "CompositeBadStuff" as game.cards.monster_bad_stuff.CompositeBadStuff {
  bad_stuffs : tuple
  apply(player) -> None
}
class "CompositeEffect" as game.cards.monster_effect.CompositeEffect {
  effects : tuple
  apply(monster, player) -> None
}
class "Curse" as game.card.Curse {
  effect
  apply_effect(player)
}
class "CurseEffect" as game.cards.curse_effect.CurseEffect {
  {abstract}apply(player) -> None
}
class "Death" as game.death.Death {
  player
  apply()
  {abstract}draw()
}
class "DeathBadStuff" as game.cards.monster_bad_stuff.DeathBadStuff {
  exclude_race : NoneType
  apply(player)
}
class "Deck" as game.deck.Deck {
  cards : list
  discard_pile : list
  add_card(card)
  discard(card)
  draw()
  shuffle()
}
class "Dice" as game.dice.Dice {
  img_dir : str
  last_roll : NoneType
  sides : int
  sprite_rolling_dice : Sprite
  sprite_value_dice : Sprite
  draw_rolling_dice(x, y)
  draw_value_dice(x, y)
  roll()
}
class "DoorBuff" as game.card.DoorBuff {
  after_death_effect : NoneType
  effect
  restriction
  apply_effect(target)
  can_use(player) -> bool
}
class "DoorBuffEffect" as game.cards.door_buff_effect.DoorBuffEffect {
  {abstract}apply(monster) -> None
}
class "DoorDeck" as game.deck.DoorDeck {
}
class "DrawExtraTreasureBuff" as game.cards.door_buff_effect.DrawExtraTreasureBuff {
  amount : int
  apply(monster) -> None
}
class "DrawExtraTreasureBuff" as game.cards.treasure_buff_effect.DrawExtraTreasureBuff {
  amount
  treasure_deck
  apply(target)
}
class "EscapeCombat" as game.cards.item_effect.EscapeCombat {
  monster_level_limit : NoneType
  {abstract}apply(player) -> None
}
class "EveryoneScapesBuff" as game.cards.treasure_buff_effect.EveryoneScapesBuff {
  apply(target) -> None
  increase_global_turns(game_state)
}
class "GameManager" as game.game_manager.GameManager {
  clock
  curr_turn : int
  game_state
  players : list
  renderer : GameRenderer
  screen
  waiting_timer : int
  handle_action(action, ai_turn: bool)
  increase_global_turns()
  play_automatic_turn()
  run()
}
class "GamePhases" as game.game_phases.game_phases.GamePhases {
  game_state
  {abstract}run()
}
class "GameState" as game.game_state.GameState {
  current_combat : NoneType
  current_curse : NoneType
  current_player_index : int
  dice
  door_deck
  phase : SETUP
  players
  treasure_deck
  add_player(name, img_dir, gender, is_ai: bool)
  current_player()
  get_instance()
  next_player()
  resolve_combat()
  set_combat(combat)
  set_game_phase(new_phase)
}
class "IncreaseDiceRollEffect" as game.cards.item_effect.IncreaseDiceRollEffect {
  increase_by : int
  {abstract}apply(player) -> None
}
class "IncreaseMonsterLevelBuff" as game.cards.door_buff_effect.IncreaseMonsterLevelBuff {
  bonus : int
  apply(monster) -> None
}
class "IncreaseMonsterLevelEffect" as game.cards.monster_effect.IncreaseMonsterLevelEffect {
  bonus : int
  raceClass : str
  apply(monster, player) -> None
}
class "Item" as game.card.Item {
  big : bool
  bonus
  class_required : NoneType
  classes_prohibited : NoneType
  effect
  gender_required : NoneType
  genders_prohibited : NoneType
  race_required : NoneType
  races_prohibited : NoneType
  slot : NoneType
  two_hands : bool
  value
}
class "ItemEffect" as game.cards.item_effect.ItemEffect {
  {abstract}apply(player) -> None
}
class "KickDoorFase" as game.game_phases.kick_door_phase.KickDoorFase {
  current_player
  door_deck
  renderer
  run()
}
class "LookForTroublePhase" as game.game_phases.look_for_trouble_phase.LookForTroublePhase {
  current_player
  renderer
  get_monsters_from_hand()
  run()
}
class "LootRoomPhase" as game.game_phases.loot_room_phase.LootRoomPhase {
  current_player
  loot_card : NoneType
  treasure_deck
  run()
  show_loot_card()
}
class "LoseAllClassItemsBadStuff" as game.cards.monster_bad_stuff.LoseAllClassItemsBadStuff {
  apply(player) -> None
}
class "LoseClassCurseEffect" as game.cards.curse_effect.LoseClassCurseEffect {
  apply(player) -> None
}
class "LoseEquippedItemBadStuff" as game.cards.monster_bad_stuff.LoseEquippedItemBadStuff {
  item_type : str
  apply(player) -> None
}
class "LoseEquippedItemOrLevelBadStuff" as game.cards.monster_bad_stuff.LoseEquippedItemOrLevelBadStuff {
  item_type : str
  level_loss : int
  apply(player) -> None
}
class "LoseHandCardsBadStuff" as game.cards.monster_bad_stuff.LoseHandCardsBadStuff {
  qty : NoneType
  apply(player) -> None
}
class "LoseItemsBadStuff" as game.cards.monster_bad_stuff.LoseItemsBadStuff {
  qty : NoneType
  apply(player) -> None
}
class "LoseLevelBadStuff" as game.cards.monster_bad_stuff.LoseLevelBadStuff {
  level_loss : int
  apply(player) -> None
}
class "LoseRaceCurseEffect" as game.cards.curse_effect.LoseRaceCurseEffect {
  apply(player) -> None
}
class "Monster" as game.card.Monster {
  after_death_effect : NoneType
  bad_stuff
  base_level : int
  base_treasure : int
  effect
  level : int
  pursue : bool
  reward_two_levels : bool
  treasure : int
  apply_after_death_effect(player)
  apply_bad_stuff(player)
  apply_effect(player)
  reset_stats()
}
class "MonsterBadStuff" as game.cards.monster_bad_stuff.MonsterBadStuff {
  {abstract}apply(player) -> None
}
class "MonsterEffect" as game.cards.monster_effect.MonsterEffect {
  {abstract}apply(monster, player) -> None
}
class "MoreTreasureEffect" as game.cards.monster_effect.MoreTreasureEffect {
  include_race : NoneType
  qty_plus_treasure
  apply(monster, player) -> None
}
class "NotPursueLevelEffect" as game.cards.monster_effect.NotPursueLevelEffect {
  exclude_race : NoneType
  level_limit
  apply(monster, player) -> None
}
class "OnlyInCombatRestriction" as game.cards.buff_restriction.OnlyInCombatRestriction {
  check(player)
}
class "OrcsBadStuff" as game.cards.monster_bad_stuff.OrcsBadStuff {
  apply(player) -> None
}
class "Player" as game.player.Player {
  avatar_img_dir
  class_ : NoneType
  combat_strength : int
  equipped_items : list
  gender
  gold : int
  hand : list
  is_ai : bool
  level : int
  name
  race : HUMAN
  add_to_discard_pile(card)
  calculate_combat_strength()
  donate_cards(max_hand_size)
  draw_card(deck)
  equip_item(item)
  get_player_race()
  level_down(value)
  level_up()
  lose_all_class_cards()
  lose_all_equipped_class_items()
  lose_all_hand_cards()
  play_card(card, game_state)
  remove_all_hand_class_cards()
  remove_class()
  remove_equipped_item_type(item_type: str)
  remove_equipped_items(quantity)
  remove_hand_card(card)
  remove_hand_cards(quantity)
  remove_race()
  replace_class(card)
  replace_race(card)
  shuffle_hand()
  unequip_item(item)
}
class "PlayerLoseLevelsIfLevelIsBiggerThanMonsterEffect" as game.cards.monster_effect.PlayerLoseLevelsIfLevelIsBiggerThanMonsterEffect {
  level_loss : int
  apply(monster, player) -> None
}
class "Race" as game.card.Race {
  race_type
  special_ability
}
class "SetupPhase" as game.game_phases.setup_phase.SetupPhase {
  action_type
  item
  player
  renderer
  process_sale(selected_items)
  run()
  show_sell_items_modal()
}
class "StealALevelBuff" as game.cards.treasure_buff_effect.StealALevelBuff {
  curr_player
  apply(target)
}
class "TreasureBuff" as game.card.TreasureBuff {
  effect
  restriction
  apply_effect(player)
  can_use(player) -> bool
}
class "TreasureBuffEffect" as game.cards.treasure_buff_effect.TreasureBuffEffect {
  {abstract}apply(target) -> None
}
class "TreasureDeck" as game.deck.TreasureDeck {
}
class "UpALevelBuff" as game.cards.treasure_buff_effect.UpALevelBuff {
  apply(target) -> None
}
game.card.Class --|> game.card.Card
game.card.Curse --|> game.card.Card
game.card.DoorBuff --|> game.card.Card
game.card.Item --|> game.card.Card
game.card.Monster --|> game.card.Card
game.card.Race --|> game.card.Card
game.card.TreasureBuff --|> game.card.Card
game.cards.buff_restriction.OnlyInCombatRestriction --|> game.cards.buff_restriction.BuffsRestriction
game.cards.curse_effect.ApplyDiscardCardBadStuffCurseEffect --|> game.cards.curse_effect.CurseEffect
game.cards.curse_effect.ChangeClassCurseEffect --|> game.cards.curse_effect.CurseEffect
game.cards.curse_effect.ChangeRaceCurseEffect --|> game.cards.curse_effect.CurseEffect
game.cards.curse_effect.LoseClassCurseEffect --|> game.cards.curse_effect.CurseEffect
game.cards.curse_effect.LoseRaceCurseEffect --|> game.cards.curse_effect.CurseEffect
game.cards.door_buff_effect.DrawExtraTreasureBuff --|> game.cards.door_buff_effect.DoorBuffEffect
game.cards.door_buff_effect.IncreaseMonsterLevelBuff --|> game.cards.door_buff_effect.DoorBuffEffect
game.cards.item_effect.BlockCurses --|> game.cards.item_effect.ItemEffect
game.cards.item_effect.BonusByRace --|> game.cards.item_effect.ItemEffect
game.cards.item_effect.EscapeCombat --|> game.cards.item_effect.ItemEffect
game.cards.item_effect.IncreaseDiceRollEffect --|> game.cards.item_effect.ItemEffect
game.cards.monster_bad_stuff.CompositeBadStuff --|> game.cards.monster_bad_stuff.MonsterBadStuff
game.cards.monster_bad_stuff.DeathBadStuff --|> game.cards.monster_bad_stuff.MonsterBadStuff
game.death.Death --|> game.cards.monster_bad_stuff.DeathBadStuff
game.cards.monster_bad_stuff.LoseAllClassItemsBadStuff --|> game.cards.monster_bad_stuff.MonsterBadStuff
game.cards.monster_bad_stuff.LoseEquippedItemBadStuff --|> game.cards.monster_bad_stuff.MonsterBadStuff
game.cards.monster_bad_stuff.LoseEquippedItemOrLevelBadStuff --|> game.cards.monster_bad_stuff.MonsterBadStuff
game.cards.monster_bad_stuff.LoseHandCardsBadStuff --|> game.cards.monster_bad_stuff.MonsterBadStuff
game.cards.monster_bad_stuff.LoseItemsBadStuff --|> game.cards.monster_bad_stuff.MonsterBadStuff
game.cards.monster_bad_stuff.LoseLevelBadStuff --|> game.cards.monster_bad_stuff.MonsterBadStuff
game.cards.monster_bad_stuff.OrcsBadStuff --|> game.cards.monster_bad_stuff.MonsterBadStuff
game.cards.monster_effect.CompositeEffect --|> game.cards.monster_effect.MonsterEffect
game.cards.monster_effect.IncreaseMonsterLevelEffect --|> game.cards.monster_effect.MonsterEffect
game.cards.monster_effect.MoreTreasureEffect --|> game.cards.monster_effect.MonsterEffect
game.cards.monster_effect.NotPursueLevelEffect --|> game.cards.monster_effect.MonsterEffect
game.cards.monster_effect.PlayerLoseLevelsIfLevelIsBiggerThanMonsterEffect --|> game.cards.monster_effect.MonsterEffect
game.cards.treasure_buff_effect.BonusToEitherSideBuff --|> game.cards.treasure_buff_effect.TreasureBuffEffect
game.cards.treasure_buff_effect.DrawExtraTreasureBuff --|> game.cards.treasure_buff_effect.TreasureBuffEffect
game.cards.treasure_buff_effect.EveryoneScapesBuff --|> game.cards.treasure_buff_effect.TreasureBuffEffect
game.cards.treasure_buff_effect.StealALevelBuff --|> game.cards.treasure_buff_effect.TreasureBuffEffect
game.cards.treasure_buff_effect.UpALevelBuff --|> game.cards.treasure_buff_effect.TreasureBuffEffect
game.deck.DoorDeck --|> game.deck.Deck
game.deck.TreasureDeck --|> game.deck.Deck
game.game_phases.charity_phase.CharityPhase --|> game.game_phases.game_phases.GamePhases
game.game_phases.combat_phase.CombatPhase --|> game.game_phases.game_phases.GamePhases
game.game_phases.kick_door_phase.KickDoorFase --|> game.game_phases.game_phases.GamePhases
game.game_phases.look_for_trouble_phase.LookForTroublePhase --|> game.game_phases.game_phases.GamePhases
game.game_phases.loot_room_phase.LootRoomPhase --|> game.game_phases.game_phases.GamePhases
game.game_phases.setup_phase.SetupPhase --|> game.game_phases.game_phases.GamePhases
game.card.Class --* game.deck.DoorDeck
game.card.Curse --* game.deck.DoorDeck
game.card.Curse --* game.game_state.GameState : current_curse
game.card.DoorBuff --* game.deck.DoorDeck
game.card.Item --* game.deck.TreasureDeck
game.card.Monster --* game.deck.DoorDeck
game.card.Race --* game.deck.DoorDeck
game.card.TreasureBuff --* game.deck.TreasureDeck
game.cards.buff_restriction.BuffsRestriction --* game.card.DoorBuff : restriction
game.cards.buff_restriction.BuffsRestriction --* game.card.TreasureBuff : restriction
game.cards.curse_effect.CurseEffect --* game.card.Curse : effect
game.cards.door_buff_effect.DoorBuffEffect --* game.card.DoorBuff : effect
game.cards.item_effect.ItemEffect --* game.card.Item : effect
game.cards.monster_bad_stuff.MonsterBadStuff --* game.card.Monster : bad_stuff
game.cards.monster_effect.MonsterEffect --* game.card.Monster : effect
game.cards.treasure_buff_effect.TreasureBuffEffect --* game.card.TreasureBuff : effect
game.combat.Combat --* game.game_state.GameState : current_combat
game.deck.DoorDeck --* game.game_state.GameState : door_deck
game.deck.TreasureDeck --* game.game_state.GameState : treasure_deck
game.dice.Dice --* game.game_state.GameState : dice
game.game_phases.game_phases.GamePhases --* game.game_state.GameState : phase
game.game_state.GameState --* game.game_manager.GameManager : game_state
game.player.Player --* game.game_state.GameState : players
@enduml
