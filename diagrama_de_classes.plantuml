@startuml

enum CardType {
    MONSTER
    CURSE
    RACE
    CLASS
    ITEM
    DOOR_BUFF
    TREASURE_BUFF
}

enum RaceTypes {
    DWARF
    ELF
    HALFlING
    HUMAN
    ORC
}

enum ClassTypes {
    WARRIOR
    CLERIC
    THIEF
    WIZARD
    BARD
}

enum ItemSlotTypes {
    HANDS
    HEAD
    ARMOR
    FEET
}

enum Gender {
    MALE
    FEMALE
}

enum CombatStates {
    WINNING
    LOSING
}

enum GamePhase {
    SETUP
    KICK_DOOR
    LOOK_FOR_TROUBLE
    LOOT_ROOM
    COMBAT
    CHARITY
    FINAL_SETUP
}

class Card {
    +name: str
    +image: str
    +type: CardType
    +__init__(name, image, type)
    +__str__(): str
}

class Monster {
    +base_level: int
    +level: int
    +base_treasure: int
    +treasure: int
    +effect: MonsterEffect
    +bad_stuff: MonsterBadStuff
    +reward_two_levels: bool
    +pursue: bool
    +after_death_effect
    +__init__(name, image, level, treasure, effect, bad_stuff, reward_two_levels)
    +reset_stats()
    +apply_effect(player)
    +apply_bad_stuff(player)
    +apply_after_death_effect(player)
}

class Item {
    +bonus: int
    +value: int
    +slot: ItemSlotTypes
    +big: bool
    +class_required
    +classes_prohibited
    +race_required
    +races_prohibited
    +gender_required
    +genders_prohibited
    +two_hands: bool
    +effect
    +__init__(name, image, bonus, value, slot, big, two_hands, class_required, classes_prohibited, race_required, races_prohibited, gender_required, genders_prohibited, effect)
}

class Race {
    +special_ability
    +race_type: RaceTypes
    +__init__(name, image, special_ability, race_type)
}

class Class {
    +class_type: ClassTypes
    +__init__(name, image, class_type)
}

class Curse {
    +effect
    +__init__(name, image, effect)
    +apply_effect(player)
}

class DoorBuff {
    +effect
    +restriction
    +after_death_effect
    +__init__(name, image, effect, restriction, after_death_effect)
    +can_use(player): bool
    +apply_effect(target)
}

class TreasureBuff {
    +effect
    +restriction
    +__init__(name, image, effect, restriction)
    +can_use(player): bool
    +apply_effect(player)
}

class Player {
  - name: string
  - avatar_img_dir: string
  - level: int
  - combat_strength: int
  - hand: list
  - equipped_items: list
  - race: RaceTypes
  - gold: int
  - class_: Class
  - gender: string

  + __init__(name: string, avatar_img_dir: string, gender: string)
  + calculate_combat_strength(): int
  + equip_item(item: Item): bool
  + unequip_item(item: Item): void
  + draw_card(deck: Deck): void
  + add_to_discard_pile(card: Card): void
  + play_card(card: Card, game_state: GameState): bool
  + level_up(): void
  + level_down(value: int = 1): void
  + remove_class(): void
  + replace_class(card: Card): void
  + remove_race(): void
  + replace_race(card: Card): void
  + remove_hand_card(card: Card): void
  + lose_all_hand_cards(): void
  + remove_equipped_items(quantity: int = None): void
  + remove_hand_cards(quantity: int = None): void
  + lose_all_equipped_class_items(): void
  + remove_equipped_item_type(item_type: string): void
  + remove_all_hand_class_cards(): void
  + lose_all_class_cards(): void
  + shuffle_hand(): void
  + donate_cards(max_hand_size: int = 5): list
  + get_player_race(): string
}

class Deck {
  - cards: List
  - discard_pile: List
  + __init__()
  + add_card(card)
  + shuffle()
  + draw()
  + discard(card)
}

class DoorDeck {
  + __init__()
  - _initialize_deck()
}

class TreasureDeck {
  + __init__()
  - _initialize_deck()
}

class Dice {
    - img_dir: str
    - sides: int
    - last_roll: int
    - sprite_rolling_dice: Sprite
    - sprite_value_dice: Sprite

    + __init__()
    + roll(): int
    + draw_rolling_dice(x: int = 0, y: int = 0): void
    + draw_value_dice(x: int = 0, y: int = 0): void
}

class Combat {
    - player
    - monster
    - player_modifiers: int
    - monster_modifiers: int
    - can_run_away: bool
    - helpers: list
    + __init__(player, monster)
    + get_player_strength(): int
    + apply_monster_effect(): void
    + get_monster_strength(): int
    + add_helper(player): bool
    + remove_helper(player): bool
    + add_player_modifier(value): int
    + add_monster_modifier(value): int
    + try_to_run(value): bool
    + resolve_combat(): tuple
    + get_combat_state(): CombatStates
}

class Death {
  - player: Player
  + __init__(player: Player)
  + apply(): void
  + draw(): void
}

class GameState {
    - _instance: GameState
    - door_deck: DoorDeck
    - treasure_deck: TreasureDeck
    - players: list[Player]
    - dice: Dice
    - current_player_index: int
    - phase: GamePhase
    - current_combat: Combat
    - current_curse: Curse
    + __init__()
    + {static} get_instance(): GameState
    + add_player(name: str, img_dir: str, gender: Gender): void
    + next_player(): void
    + current_player(): Player
    + resolve_combat(): bool
    + set_game_phase(new_phase: GamePhase): void
    + set_combat(combat: Combat): void
}

abstract class GamePhases {
  - game_state
  + __init__(game_state)
  + {abstract} run()
}

class SetupPhase {
    - player
    - action_type
    - item
    - renderer
    + __init__(game_state, action, renderer)
    + run()
    - show_sell_items_modal()
    - process_sale(selected_items)
}

class KickDoorPhase {
  - door_deck
  - current_player
  - renderer
  + __init__(game_state, renderer)
  + run()
}

class CombatPhase {
    - player
    - card
    - renderer
    + __init__(game_state, card, renderer)
    + run(): boolean
}

class LookForTroublePhase {
    -current_player
    -renderer
    +__init__(game_state, renderer)
    +get_monsters_from_hand(): List[Monster]
    +run(): boolean
}

class LootRoomPhase {
    - treasure_deck
    - current_player
    - loot_card
    + __init__(game_state)
    + run(): boolean
    + show_loot_card()
}

class CharityPhase {
  - players: List
  - current_player_index: int
  - renderer: Renderer
  + __init__(game_state: GameState, renderer: Renderer)
  + run(died: bool = False): bool
  + get_lowest_cards_players(): List
  + {static} distribute_cards(players: List, cards: List): Dict
}

abstract class MonsterEffect {
    + {abstract} apply(monster, player): None
}

class CompositeEffect {
    - effects: MonsterEffect[]
    + apply(monster, player): None
}

class IncreaseMonsterLevelEffect {
    - raceClass: str
    - bonus: int
    + apply(monster, player): None
}

class NotPursueLevelEffect {
    - level_limit: int
    - exclude_race: str
    + apply(monster, player): None
}

class PlayerLoseLevelsIfLevelIsBiggerThanMonsterEffect {
    - level_loss: int
    + apply(monster, player): None
}

class MoreTreasureEffect {
    - qty_plus_treasure: int
    - include_race: str
    + apply(monster, player): None
}

abstract class MonsterBadStuff {
    + {abstract} apply(player): None
}

class CompositeBadStuff {
    - bad_stuffs: MonsterBadStuff[]
    + __init__(*bad_stuffs: MonsterBadStuff)
    + apply(player): None
    + __str__(): String
}

class DeathBadStuff {
    - exclude_race: String
    + __init__(exclude_race=None)
    + apply(player): None
    + __str__(): String
}

class OrcsBadStuff {
    + apply(player): None
    + __str__(): String
}

class LoseItemsBadStuff {
    - qty: int
    + __init__(qty=None)
    + apply(player): None
    + __str__(): String
}

class LoseHandCardsBadStuff {
    - qty: int
    + __init__(qty=None)
    + apply(player): None
    + __str__(): String
}

class LoseLevelBadStuff {
    - level_loss: int
    + __init__(level_loss: int)
    + apply(player): None
    + __str__(): String
}

class LoseEquippedItemBadStuff {
    - item_type: String
    + __init__(item_type: String)
    + apply(player): None
    + __str__(): String
}

class LoseAllClassItemsBadStuff {
    + apply(player): None
    + __str__(): String
}

class LoseEquippedItemOrLevelBadStuff {
    - item_type: String
    - level_loss: int
    + __init__(item_type: String, level_loss: int)
    + apply(player): None
    + __str__(): String
}

abstract class ItemEffect {
    + {abstract} apply(player): None
}

class IncreaseDiceRollEffect {
    - increase_by: int
    + __init__(value: int = 1)
    + apply(player): None
}

class BonusByRace {
    - increase_by: int
    - race_required: str
    + __init__(race: str, value: int = 2)
    + apply(player): None
}

class EscapeCombat {
    - monster_level_limit: int
    + __init__(monster_level: int = None)
    + apply(player): None
}

class BlockCurses {
    + apply(player): None
}

abstract class CurseEffect {
    + {abstract} apply(player): None
}

class ApplyDiscardCardBadStuffCurseEffect {
    + apply(player): None
}

class ChangeClassCurseEffect {
    + apply(player): None
}

class ChangeRaceCurseEffect {
    + apply(player): None
}

class LoseRaceCurseEffect {
    + apply(player): None
}

class LoseClassCurseEffect {
    + apply(player): None
}

abstract class DoorBuffEffect {
    + {abstract} apply(monster): None
}

class IncreaseMonsterLevelBuff {
    - bonus: int
    + apply(monster): None
}

class DrawExtraTreasureBuff {
    - amount: int
    + apply(monster): None
}

abstract class TreasureBuffEffect {
    + {abstract} apply(target): None
}

class EveryoneScapesBuff {
    + increase_global_turns(turn, game_state)
    + apply(target): None
}

class BonusToEitherSideBuff {
    - bonus: int
    + apply(target): None
}

class UpALevelBuff {
    + apply(target): None
}

class DrawExtraTreasureBuff {
    - amount: int
    - treasure_deck: TreasureDeck
    + apply(target): None
}

class StealALevelBuff {
    - curr_player: Player
    + apply(target): None
}

Card <|-- Monster
Card <|-- Item
Card <|-- Race
Card <|-- Class
Card <|-- Curse
Card <|-- DoorBuff
Card <|-- TreasureBuff

Player --> Gender
Player --> RaceTypes
Player --> ClassTypes

Player "1" *-- "*" Card
Player "1" *-- "*" Item
Player "1" -- "0..1" Race
Player "1" -- "0..1" Class

Death --> Player

Deck <|-- DoorDeck
Deck <|-- TreasureDeck

DoorDeck ..> CardType

TreasureDeck ..> CardType

Combat o-- CombatStates
Combat "1" *-- "1" Monster
Combat "1" *-- "1" Player

DoorDeck --> GameState
TreasureDeck --> GameState

SetupPhase --> Player
SetupPhase --> Item

KickDoorPhase --> DoorDeck
KickDoorPhase --> Player
KickDoorPhase --> Combat
KickDoorPhase --|> GamePhases
KickDoorPhase --> GameState
KickDoorPhase --> CardType
KickDoorPhase --> CombatPhase

CombatPhase --> Combat
CombatPhase --> Player
CombatPhase --> Monster

LookForTroublePhase --> Player
LookForTroublePhase --> Monster
LookForTroublePhase --> Combat

LootRoomPhase o-- GameState
LootRoomPhase --> TreasureDeck
LootRoomPhase --> Player

CharityPhase --> Player
CharityPhase --> Card

GameState "1" *-- "*" Player
GameState "1" *-- "1" Dice
GameState "1" *-- "1" GamePhase
GameState "1" *-- "0..1" Combat

GamePhases --> "1" GameState
GamePhases <|-- SetupPhase
GamePhases <|-- CombatPhase
GamePhases <|-- LookForTroublePhase
GamePhases <|-- LootRoomPhase
GamePhases <|-- CharityPhase
GamePhases --> DoorDeck
GamePhases --> TreasureDeck
GamePhases --> Player

MonsterEffect <|-- CompositeEffect
MonsterEffect <|-- IncreaseMonsterLevelEffect
MonsterEffect <|-- NotPursueLevelEffect
MonsterEffect <|-- PlayerLoseLevelsIfLevelIsBiggerThanMonsterEffect
MonsterEffect <|-- MoreTreasureEffect

MonsterBadStuff <|-- CompositeBadStuff
MonsterBadStuff <|-- DeathBadStuff
MonsterBadStuff <|-- OrcsBadStuff
MonsterBadStuff <|-- LoseItemsBadStuff
MonsterBadStuff <|-- LoseHandCardsBadStuff
MonsterBadStuff <|-- LoseLevelBadStuff
MonsterBadStuff <|-- LoseEquippedItemBadStuff
MonsterBadStuff <|-- LoseAllClassItemsBadStuff
MonsterBadStuff <|-- LoseEquippedItemOrLevelBadStuff

Monster "1" *-- "1" MonsterEffect
Monster "1" *-- "1" MonsterBadStuff
Monster "1" *-- "0..1" AfterDeathEffect

ItemEffect <|-- IncreaseDiceRollEffect
ItemEffect <|-- BonusByRace
ItemEffect <|-- EscapeCombat
ItemEffect <|-- BlockCurses

Item --> ItemSlotTypes
Item "1" *-- "0..1" ItemEffect

CurseEffect <|-- ApplyDiscardCardBadStuffCurseEffect
CurseEffect <|-- ChangeClassCurseEffect
CurseEffect <|-- ChangeRaceCurseEffect
CurseEffect <|-- LoseRaceCurseEffect
CurseEffect <|-- LoseClassCurseEffect

DoorBuffEffect <|-- IncreaseMonsterLevelBuff
DoorBuffEffect <|-- DrawExtraTreasureBuff

TreasureBuffEffect <|-- EveryoneScapesBuff
TreasureBuffEffect <|-- BonusToEitherSideBuff
TreasureBuffEffect <|-- UpALevelBuff
TreasureBuffEffect <|-- DrawExtraTreasureBuff
TreasureBuffEffect <|-- StealALevelBuff

Curse "1" *-- "1" CurseEffect
DoorBuff "1" *-- "1" DoorBuffEffect
TreasureBuff "1" *-- "1" TreasureBuffEffect

note right of Player
  - Limite máximo de 5 cartas na mão
  - Só pode ter 1 headgear, 1 armor, 1 footgear
  - Pode ter até 2 itens de "hands" (ou 1 item "two_hands")
  - Só pode ter 1 raça ativa (exceto se for Halfling)
  - Só pode ter 1 classe ativa (exceto se tiver habilidade especial)
  - Nível máximo é 10
  - Nível mínimo é 1
end note

note right of Monster
  - Efeitos são aplicados quando o monstro entra em combate
  - Bad Stuff é aplicado apenas se o jogador perder ou fugir
  - AfterDeathEffect é aplicado apenas se o monstro for derrotado
  - Nível base não pode ser modificado
  - Nível atual pode ser modificado por efeitos
end note

note left of Combat
  - Player precisa ter força total > nível do monstro para vencer
  - Força total = nível + bônus de itens + bônus de raça/classe
  - Fuga requer rolagem de dado >= 5
  - Helpers só podem ser adicionados antes do combate começar
  - Máximo de 1 helper por combate
end note

note right of Item
  - Items "big" contam como 2 itens no limite de carregamento
  - Items "two_hands" ocupam os 2 slots de mão
  - Restrições de classe/raça/gênero são verificadas ao equipar
  - Valor em ouro é usado apenas para venda
end note

note left of GameState
  - Só pode existir uma instância (Singleton)
  - Controla sequência de fases do jogo
  - Mantém estado atual do jogo
  - Gerencia transições entre fases
  - Coordena interações entre jogadores
end note

note right of Deck
  - Quando acabam as cartas, embaralha descarte
  - Cartas descartadas vão para baixo do deck
  - Não pode haver mais que 1 cópia da mesma carta
  - DoorDeck e TreasureDeck são separados
end note

note left of GamePhases
  - Setup: Equipa itens e vende para subir de nível
  - KickDoor: Revela primeira carta da porta
  - Combat: Resolve batalha com monstro
  - LookForTrouble: Joga monstro da mão
  - LootRoom: Compra carta de tesouro
  - Charity: Descarta excesso de cartas
end note

note right of ItemEffect
  - Efeitos são imutáveis após criação
  - Podem ser compostos (CompositeEffect)
  - Devem especificar claramente condições
  - Podem ter restrições de uso
  - Podem ter duração limitada
end note

@enduml